[{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/articles/RGCA.html","id":"simple-usage-of-rgca","dir":"Articles","previous_headings":"","what":"Simple Usage of RGCA","title":"Simple Application of RGCA","text":"method generalize variety smooth, monotone dose response functions, package designed around Hill function, \\[f(x|,b,c) = \\frac{}{1+\\left(\\frac{b}{x}\\right)^{c}}\\] parameters sill (), EC50 (b), slope (c). Give parameters cluster assignment vector, RGCA can create calculator predicts mixture response given input dose vector \\((x_1,...,x_n)\\). example , three chemicals known Hill parameters. cluster assignment vector used group chemicals similarity. two chemicals group, assumed equivalent adjusting potency. chemicals added one group via, prediction equivalent concentration additon (AKA dose addition, Loewe Additivity). chemicals added separate groups, prediction equivalent independent action (AKA response addition, Bliss independence). create mixture, need specify concentration chemical. Now can plot two predicted mixture responses. ## Fitting Dose Response Curves example , assume parameters known. raw data individual chemical dose responses want fit random effect model describe manuscript, RGCA package built-Bayesian MCMC fitting routing. function designed fit Hill model described earlier random effects (u, v) replicates: \\[f(x |,b,c) = \\frac{+ u}{1+\\left(\\frac{b}{x}\\right)^{c}}+ v + \\epsilon\\] random effects allow replicates different responses either adjusting maximum effect (u) adjusting minimum effect (v). Three pieces data needed: responses, doses, list replicates. sample curves using specified parameters. output plotted looks reasonable. Now can run custom MCMC script fit data. use helper function extract relevant parameters compare true parameters. Note addition extracting point estimates parameters (using median default), standard deviations also extracted. used , can provide uncertainty quantification sampling values plotting resulting curves.","code":"n_chems <- 3 sills <- c(3, 5, 4) ec50_vec <- c(1, 0.75, 2.4) slopes <- c(0.75, 1.1, 2.0) # Rmax is used to scale IA across clusters, can copy sills param_matrix <- as.matrix(cbind(\"a\" = sills,                                 \"b\" = ec50_vec,                                 \"c\" = slopes,                                 \"max_R\" = sills)) # Example 1: concentration addition  cluster_assign_vec <- c(1, 1, 1) # Example 2: independent action cluster_assign_vec <- c(1, 2, 3) # A random cluster cluster_assign_vec <- c(1, 2, 1) # create a calculator to predict response given concentration mix_pred <- mix_function_generator(param_matrix, cluster_assign_vec) # generate mix concentrations:  each row of the matrix is one dose of the mix n_samps <- 30 # equipotent mixture: concentrations scaled by EC50 equipot_conc_matrix <- matrix(0, nrow = n_samps, ncol = n_chems) # equimolar mixture: equal concentration of all chemicals equimol_conc_matrix <- matrix(0, nrow = n_samps, ncol = n_chems) # generate concentrations on the log scale for (chem_idx in 1:n_chems) {   equipot_conc_matrix[, chem_idx] <-     ec50_vec[chem_idx] / (10^seq(2, -1, length.out = n_samps))   equimol_conc_matrix[, chem_idx] <-     1 / (10^seq(3, -1, length.out = n_samps)) } #create the mixture concentration vector for plotting equipot_conc <- rowSums(equipot_conc_matrix) equimol_conc <- rowSums(equimol_conc_matrix) # Apply the pediction function to the concentrations of interest pred_equipot <- apply(equipot_conc_matrix,                       MARGIN = 1,                       FUN = function(x) mix_pred(x)) pred_equimol <- apply(equimol_conc_matrix,                       MARGIN = 1,                       FUN = function(x) mix_pred(x)) plot(equimol_conc, pred_equimol, log = \"x\", ylim = c(0, 5)) points(equipot_conc, pred_equimol, col = 2) set.seed(123) replicate_sets = list(c(1,2,3), c(4,5), c(6,7,8)) n_repls = max(unlist(replicate_sets)) doses = 1/ (10^seq(2, -3, length.out = n_samps)) Cx = matrix(doses, nrow = n_repls, ncol = n_samps, byrow = T) # specify which rows of the data will correspond to which parameter data = matrix(0, nrow = n_repls, ncol = n_samps) #iterate over the parameter sets for(rep_idx in seq_along(replicate_sets)){   # iterate over replicates   for(row_idx in replicate_sets[[rep_idx]]){     hill_params <- param_matrix[rep_idx,1:3]     # add random effect for sill     samp_sd_u = ifelse(row_idx == replicate_sets[[rep_idx]][1], 0, 1)     hill_params[['a']] <- hill_params[['a']] + rnorm(1, sd=samp_sd_u)     data[row_idx,] <- sapply(doses, FUN = function(d) {       do.call(hill_function, as.list(c(hill_params, conc = d)))     })   } } # now we add iid noise to simulate observations noisy_data = data + matrix(rnorm(length(data), sd = 0.25), nrow = 8) matplot(doses,t(data), type = \"l\", log = \"x\") matplot(doses, t(noisy_data), type = \"p\",add = T, pch = 1) RE_mcmc_chains = RE_MCMC_fit(y_i = noisy_data,             Cx = Cx,             replicate_sets = replicate_sets) RE_params = pull_summary_parameters(RE_mcmc_chains, summry_stat = median)  print(RE_params) ## $sill_params ## [1] 3.039055 4.997729 3.947410 ##  ## $sill_sd ## [1] 0.07896465 0.06644112 0.06192497 ##  ## $ec50_params ## [1] 1.0168967 0.7195774 2.3454213 ##  ## $ec50_stdev ## [1] 0.16024360 0.04082689 0.09366453 ##  ## $u_RE_params ## [1]  0.00000000 -0.37343283 -0.11834004  0.00000000  1.64234934  0.00000000 ## [7]  0.01136244  0.17092552 ##  ## $v_RE_params ## [1]  0.00000000 -0.13420422 -0.13471061  0.00000000 -0.10752350  0.00000000 ## [7]  0.07774817  0.04011637 ##  ## $u_RE_sd_params ## [1] 0.5009757 2.1398733 0.3794902 ##  ## $v_RE_sd_params ## [1] 0.3948315 0.5540349 0.3663125 ##  ## $slope_params ## [1] 0.6551344 1.0399488 2.3618687 fitted_params = as.matrix(cbind(\"a\" = RE_params$sill_params,                                 \"b\" = RE_params$ec50_params,                                 \"c\" = RE_params$slope_params)) u_pars = RE_params$u_RE_params v_pars = RE_params$v_RE_params pred_data = data*0 for(rep_idx in seq_along(replicate_sets)){   # iterate over replicates   for(row_idx in replicate_sets[[rep_idx]]){     hill_params <- fitted_params[rep_idx,]     # add random effect for sill     hill_params[['a']] <- hill_params[['a']] + u_pars[row_idx]     pred_data[row_idx,] <- sapply(Cx[rep_idx,], FUN = function(d) {       do.call(hill_function, as.list(c(hill_params, conc = d)))     }) + v_pars[row_idx]   } } matplot(doses,t(pred_data), type = \"l\", log = \"x\"); matplot(doses, t(noisy_data), type = \"p\",add = T, pch = 1)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/articles/RGCA_manuscript.html","id":"the-mixture-prediction-pipeline","dir":"Articles","previous_headings":"","what":"The Mixture Prediction Pipeline","title":"RGCA Manuscript Pipeline","text":"script predicts response mixture chemicals given input data individual dose responses concentrations components mixture. procedure followed pipeline follows: 1. Load inputs 2. Fit individual dose response curves 3. Cluster individual dose response slope parameters 4. Create collection predictors (“calculators”) sampling slope cluster parameters 5. Given mixture, predict response calculator. plots show 5, 50, 95 percentile.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/articles/RGCA_manuscript.html","id":"loading-data","dir":"Articles","previous_headings":"The Mixture Prediction Pipeline","what":"Loading data","title":"RGCA Manuscript Pipeline","text":"start, load required packages, including RGCA, auxiliary files plotting reading Tox21 data. part package specific manuscript. Next read prepared Tox21 data, creates series objects including observed dose response \\(y_i\\), concentration observed dose response \\(Cx\\), list track entries replicates. Null values present data indicate anomalous response, cell death. chemicals 3 replicates 6.","code":"library(ggplot2) library(cowplot) library(reshape2) library(drc) #> Loading required package: MASS #>  #> 'drc' has been loaded. #> Please cite R and 'drc' if used for a publication, #> for references type 'citation()' and 'citation('drc')'. #>  #> Attaching package: 'drc' #> The following objects are masked from 'package:stats': #>  #>     gaussian, getInitial library(readxl) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:MASS': #>  #>     select #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(scoringRules) library(RGCA) library(utils)  source(\"../../inst/manuscript_plots.R\") #> Loading required package: plotly #> Warning in library(package, lib.loc = lib.loc, character.only = TRUE, #> logical.return = TRUE, : there is no package called 'plotly' source(\"../../inst/tox21_prep_data.R\") source(\"../../inst/helper_pipeline.R\") #> Loading required package: coda #> Loading required package: tables #> Warning in library(package, lib.loc = lib.loc, character.only = TRUE, #> logical.return = TRUE, : there is no package called 'tables' input_df <- utils::read.delim(\"../../inst/extdata/AR-luc.txt\") mix_guide <- readxl::read_xls(\"../../inst/extdata/AllMixtureComponentsARER.xls\") read_prepared_Tox21_data(input_df, mix_guide) message(\"Observed response\") #> Observed response head(y_i) #>            [,1]       [,2]        [,3]       [,4]        [,5]       [,6] #> [1,]  1.1826353  2.4826635  1.51578025  1.4892761  4.49209447  6.5474142 #> [2,] -0.6334479  0.9216168  0.60169789  2.0617608  1.33278993  0.9216314 #> [3,] -1.5807759  2.9179836  1.48661741 -0.8020371  0.06912863 -0.5359517 #> [4,]  1.3299733  1.1730434 -0.04242502  0.3463708  0.04687224  0.1058324 #> [5,]  0.1689624  1.1800216  0.77479527  0.4291119  0.99653685  0.3122312 #> [6,]  6.9164171 18.6521627 42.43889777 65.0567233 80.80913096 86.7305131 #>            [,7]       [,8]      [,9]      [,10]      [,11]     [,12]     [,13] #> [1,] 10.0457328 19.4146939 33.582836 47.2007379 57.2383820 94.758215 80.468399 #> [2,]  1.0420852  1.4888338  1.244484  0.5806189 -0.8943978 -1.534201 -1.577272 #> [3,] -0.5994553  0.8354096  1.466298 -0.6603799 -0.5334993 -1.134656 -1.988023 #> [4,]  0.6155381  1.0922728  1.047398  0.3259035 -0.3445795 -1.629641 -4.327155 #> [5,]  3.1553595  0.8027576  3.766346  4.5388174 16.2244239 20.882732 37.762179 #> [6,] 81.7200304 84.0045972 86.404822 86.6209343 83.9145229 89.501855 90.271835 #>           [,14]     [,15] #> [1,]         NA        NA #> [2,]  -3.134762 -8.737393 #> [3,]  -1.853277 -4.499909 #> [4,]  -4.470151 -7.752958 #> [5,]         NA        NA #> [6,] 106.733244        NA message(\"Concentration\") #> Concentration head(Cx) #>           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #> [1,] 1.174e-09 2.626e-09 5.871e-09 1.313e-08 2.935e-08 6.564e-08 1.468e-07 #> [2,] 1.125e-09 2.516e-09 5.626e-09 1.258e-08 2.813e-08 6.290e-08 1.407e-07 #> [3,] 1.169e-09 2.613e-09 5.843e-09 1.306e-08 2.921e-08 6.532e-08 1.461e-07 #> [4,] 1.039e-09 2.324e-09 5.197e-09 1.162e-08 2.598e-08 5.810e-08 1.299e-07 #> [5,] 1.200e-09 2.684e-09 6.001e-09 1.342e-08 3.001e-08 6.710e-08 1.500e-07 #> [6,] 1.189e-09 2.659e-09 5.945e-09 1.329e-08 2.972e-08 6.647e-08 1.486e-07 #>           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14] #> [1,] 3.282e-07 7.339e-07 1.641e-06 3.669e-06 8.205e-06 1.835e-05        NA #> [2,] 3.145e-07 7.033e-07 1.573e-06 3.516e-06 7.863e-06 1.758e-05 3.931e-05 #> [3,] 3.266e-07 7.303e-07 1.633e-06 3.652e-06 8.165e-06 1.826e-05 4.083e-05 #> [4,] 2.905e-07 6.496e-07 1.453e-06 3.248e-06 7.263e-06 1.624e-05 3.631e-05 #> [5,] 3.355e-07 7.502e-07 1.677e-06 3.751e-06 8.387e-06 1.875e-05        NA #> [6,] 3.323e-07 7.431e-07 1.662e-06 3.716e-06 8.308e-06 1.858e-05 4.154e-05 #>          [,15] #> [1,]        NA #> [2,] 8.791e-05 #> [3,] 9.129e-05 #> [4,] 8.120e-05 #> [5,]        NA #> [6,]        NA message(\"Replicates by index\") #> Replicates by index head(replicate_sets) #> [[1]] #> [1] 23 44 53 #>  #> [[2]] #> [1] 14 18 30 46 50 67 #>  #> [[3]] #> [1]  9 36 51 #>  #> [[4]] #> [1]  4 41 61 #>  #> [[5]] #> [1]  2  7 26 34 60 62 #>  #> [[6]] #> [1]  6  8 24 42 49 55"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/articles/RGCA_manuscript.html","id":"fitting-dose-responses","dir":"Articles","previous_headings":"The Mixture Prediction Pipeline","what":"Fitting Dose Responses","title":"RGCA Manuscript Pipeline","text":"random effect model fit chemical indexed \\(\\), \\[  R_i(c) =f_i(c|a_i,\\theta_i,\\beta_i, u_{ij}, v_{ij}) = \\frac{a_i+u_{ij}}{1+\\left(\\frac{\\theta_i}{c}\\right)^{\\beta_i}} + v_{ij} + \\epsilon_{ijc} \\] MCMC script uses standard methods. beginning 5000 iterations chains removed remaining iterations thinned. thinned samples relevant parameters provided list sampling downstream, objects median parameters methods need uncertainty quantification.","code":"re_iter <- 1e4 #for manuscript we use 2.5e4 = 25,000 iterations set.seed(102) # fit random effects model re_chains <- RE_MCMC_fit(y_i, Cx, replicate_sets, n_iter = re_iter) re_par_list <- pull_parameters(re_chains) # Pull RGCA MCMC parameters estimates without uncertainty re_par_summary <-   pull_summary_parameters(re_chains, summry_stat = median) # Collect the main parameters for clustering RE_curve_fits <- as.data.frame(list(   \"sill\" = re_par_summary$sill_params,   \"ec50\" = re_par_summary$ec50_params,   \"slope\" = re_par_summary$slope_params ))"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/articles/RGCA_manuscript.html","id":"clustering","dir":"Articles","previous_headings":"The Mixture Prediction Pipeline","what":"Clustering","title":"RGCA Manuscript Pipeline","text":"Clustering determined either randomly, sign sill, K-means algorithm. First generate random clusters follow similar procedure agonist-based (ie sill sign) clustering. K-means clustering.","code":"# RGCA + random sampling # create 20 random clusters: 1 GCA, 1 IA, and then 4x2,5x3,5x4,4x5 set.seed(1331) rand_clust_mat <- c(   rep(1, 18),   sample(1:2, 18 * 10, replace = TRUE),   sample(1:3, 18 * 20, replace = TRUE),   sample(1:4, 18 * 30, replace = TRUE),   sample(1:5, 18 * 38, replace = TRUE),   1:18 ) |> matrix(ncol = 18, byrow = TRUE) rand_clust_assign <- rep(1, nrow(rand_clust_mat)) # This naming approach sets the cluster assignment as a name to each entry, and # each entry is the weight of that assignment.  Using a vector of 1's implies # all clusterings are equally weighted.  This allows for the clustering to be # sampled if more bootstrapped samples are desired. names(rand_clust_assign) <-   apply(rand_clust_mat,         MARGIN = 1,         FUN = function(rx) {           do.call(paste, as.list(rx))         }) randclust_par_list <- list(\"cluster_assign\" = rand_clust_assign) # save a parameter list with the clustering and MCMC results from before RGCA_randclust_par_list <- c(re_par_list, randclust_par_list) one_clust_assign <- 1 clust_by_agonist <- rep(1, n_chems) clust_by_agonist[AR_agonist_rows] <- 2 names(one_clust_assign) <- do.call(paste, as.list(clust_by_agonist)) RGCA_ARER_clust_par_list <- list(   \"centers\" = matrix(re_par_summary$slope_params, nrow = 1),   \"cluster_assign\" = one_clust_assign,   \"cent_sd\" = matrix(rep(0, n_chems), nrow = 1) ) RGCA_ARER_par_list <- c(re_par_list, RGCA_ARER_clust_par_list) # RGCA using Kmeans: allow for 1 to 6 clusters kmeans_clust_mat <- matrix(0, nrow = 6, ncol = n_chems) # test 1 to 6 cluster centers for (i in 1:6) {   kmeans_clust_mat[i, ] <- kmeans(RE_curve_fits, i)$cluster   # print the ratio of the between-set sum of squares and total to compare   print(kmeans(RE_curve_fits, i)$betweenss / kmeans(RE_curve_fits, i)$totss) } #> [1] -1.452624e-16 #> [1] 0.7180256 #> [1] 0.9227801 #> [1] 0.9460953 #> [1] 0.9490617 #> [1] 0.9509603 kmeans_clust_assign <- rep(1, nrow(kmeans_clust_mat)) names(kmeans_clust_assign) <- apply(kmeans_clust_mat,                                     MARGIN = 1,                                     FUN = function(rx) {                                       do.call(paste, as.list(rx))                                     }) kmeans_clust_list <- list(\"cluster_assign\" = kmeans_clust_assign) # save a parameter list with the clustering and MCMC results from before RGCA_kmeansclust_par_list <- c(re_par_list, kmeans_clust_list)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/articles/RGCA_manuscript.html","id":"special-cases","dir":"Articles","previous_headings":"The Mixture Prediction Pipeline","what":"Special cases","title":"RGCA Manuscript Pipeline","text":"One special cases test use Reflected GCA without clustering. Hence create one large cluster (like GCA) keep fitted slopes. Regular GCA must set slope values 1.","code":"# RGCA alone #### one_clust_assign <- 1 names(one_clust_assign) <- do.call(paste, as.list(rep(1, n_chems))) RGCA_clust_par_list <- list(   \"centers\" = matrix(re_par_summary$slope_params, nrow = 1),   \"cluster_assign\" = one_clust_assign,   \"cent_sd\" = matrix(rep(0, n_chems), nrow = 1) ) RGCA_par_list <- c(re_par_list, RGCA_clust_par_list)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/articles/RGCA_manuscript.html","id":"creating-calculators","dir":"Articles","previous_headings":"The Mixture Prediction Pipeline","what":"Creating Calculators","title":"RGCA Manuscript Pipeline","text":"parameter settings established, can generate calculator functions take input doses various chemicals output predicted response. methods uncertainty quantification, bootstrap calculators using function “create_mix_calc,” take sample MCMC posterior.","code":"set.seed(1026) # Random cluster calculators n_bootstraps <- 100 random_clustered_RGCA <-   sapply(1:n_bootstraps,          FUN = function(x) {            create_mix_calc(x,                            RGCA_randclust_par_list,                            add_RE = TRUE)          }) # KMeans clustering calculator kmeans_samp_idx <- sample(1:6, size = n_bootstraps, replace = TRUE) sampled_kmeans_clustered_RGCA <-   sapply(kmeans_samp_idx,          FUN = function(x) {            create_mix_calc(x,                            RGCA_kmeansclust_par_list,                            add_RE = TRUE)          }) # No cluster (pure RGCA) calculator sampled_mix_funs_RGCA <-   sapply(rep(1, n_bootstraps),          FUN = function(x) {            create_mix_calc(x, RGCA_par_list, add_RE = TRUE)          }) # Sill clustered calculator sampled_mix_funs_RGCA_ARER <-   sapply(rep(1, n_bootstraps),          FUN = function(x) {            create_mix_calc(x,                            RGCA_ARER_par_list,                            add_RE = TRUE)          })"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/articles/RGCA_manuscript.html","id":"standard-methods-ia-and-gca","dir":"Articles","previous_headings":"The Mixture Prediction Pipeline","what":"Standard Methods: IA and GCA","title":"RGCA Manuscript Pipeline","text":"GCA fixes slope parameters 1, want allow parameters adjust constraint rerun MCMC algorithm slope fixed 1. now make parameter lists simpler Independent Action (IA) regular GCA models. IA uses parameter estimates RGCA MCMC fit. Neither IA GCA CA takes advantage uncertainty; demonstrate utility Bayesian method, principle can resampled like RGCA generate credible intervals. First, finish GCA create calculator CA, requires sill parameter equal across chemicals. Next create calculator IA.","code":"set.seed(1025) # specify the MCMC to fit 2 - parameter Hill models for GCA re_chains_2param <-   RE_MCMC_fit(y_i,               Cx,               replicate_sets,               n_iter = re_iter,               n_hill_par = 2) re_2par_list <- pull_parameters(re_chains_2param) # Pull parameter estimates without uncertainty re_2par_summary <- pull_summary_parameters(re_chains_2param) # GCA single calculator: first create the parameter specification GCA_assign <- 1 names(GCA_assign) <- do.call(paste, as.list(rep(1, n_chems))) GCA_assign_vec <-   as.numeric(strsplit(names(GCA_assign), split = \" \")[[1]]) param_matrix_GCA <- as.matrix(   cbind(     \"a\" = re_2par_summary$sill_params,     \"b\" = re_2par_summary$ec50_params,     \"c\" = re_2par_summary$slope_params,     \"max_R\" = max(re_par_summary$sill_params),     \"d\" = 0   ) ) # Next use the parameters to instantiate the predictive calculator GCA_calculator <-   mix_function_generator(param_matrix_GCA, GCA_assign_vec)  # CA single calculator #### param_matrix_CA <- as.matrix(   cbind(     \"a\" = re_par_summary$sill_params,     \"b\" = re_par_summary$ec50_params,     \"c\" = re_par_summary$slope_params,     \"max_R\" = 1,     \"d\" = 0   ) ) # simple CA calculator:  force all sill params to be equal CA_calculator <- mix_function_generator(param_matrix_CA,                                         GCA_assign_vec,                                         scale_CA = TRUE) #  IA single assignment, all chemicals are separate IA_assign <- 1 names(IA_assign) <- do.call(paste, as.list(1:n_chems)) IA_assign_vec <-   as.numeric(strsplit(names(IA_assign), split = \" \")[[1]]) param_matrix_IA <- as.matrix(   cbind(     \"a\" = re_par_summary$sill_params,     \"b\" = re_par_summary$ec50_params,     \"c\" = re_par_summary$slope_params,     \"max_R\" = max(re_par_summary$sill_params),     \"d\" = 0   ) ) # build the calculator to predict a response given a dose vector IA_calculator <-   mix_function_generator(param_matrix_IA, IA_assign_vec)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/articles/RGCA_manuscript.html","id":"calculator-set","dir":"Articles","previous_headings":"The Mixture Prediction Pipeline","what":"Calculator Set","title":"RGCA Manuscript Pipeline","text":"can collect calculators list, commenting calculators desired less cluttered plots. Note ##Predicting Mixture responses proceeding actual mixtures, can check sham mixtures one chemical correctly modeled.  Now can proceed predicting actual data. sets indices chosen based descriptions mixtures. part solving two-step model bootstrapped calculators built fitted parameters clustering, can take minutes per mixture  Finally, format score matrix plot results score comparisons. Since demonstration runs one mixture default, violin plots appear lines.","code":"# select which methods to use for prediction and plotting bootstrap_calc_list <- list(   \"RGCA\" = sampled_mix_funs_RGCA,   \"RGCA_MOA\" = sampled_mix_funs_RGCA_ARER,   \"RGCA_kMeans\" = sampled_kmeans_clustered_RGCA,   \"Random_RGCA\" = random_clustered_RGCA,   \"GCA\" = list(GCA_calculator),   \"IA\" = list(IA_calculator),   \"CA\" = list(CA_calculator) ) plot_dummy_mixture(Cx, y_i, tot_par_list, replicate_sets,                    bootstrap_calc_list, test_idx = 6) # all mixtures where the Estrogen Receptor agonists are at 4x their fitted EC50 set_4x <- c(1, 12, 20, 29, 43, 52, 55, 57) # mixtures from set_4x plus all other mixtures with all chemicals or all # Androgen receptor agonists present set_1 <- c(1, 5, 10, 12, 20, 25, 29, 30, 31, 32, 43, 45, 50, 52, 55, 57, 62) # a single index for testing mix_idx <- 1# choose one! 16, 8, 27 # a sampling of mixtures with only two components binary_mixes <- c(8, 34, 37, 61) # a sampling of chemicals with 3-5 components small_mixes <- c(6, 26, 47) # just plot one index for demonstration score_matrix <- plot_mixture_response(mix_idx, mix_df, mix_conc_df, mix_guide,                                       bootstrap_calc_list) #> Scale for shape is already present. #> Adding another scale for shape, which will replace the existing scale. score_df <- data.frame(score_matrix) # drop rows of 0, in case some mixtures were skipped score_df <- score_df[apply(score_df,                            MARGIN = 1,                            FUN = function(rx) any(rx > 0)), ] names(score_df) <- c(\"Mix id\", paste(names(bootstrap_calc_list), c(\"LLH\")),                      paste(names(bootstrap_calc_list), c(\"MSE\")),                      paste(names(bootstrap_calc_list), c(\"CRPS\")))  ## Violin Plot for Scores #### plot_scores(score_df[1, ], bootstrap_calc_list) #> No id variables; using all as measure variables #> No id variables; using all as measure variables #> No id variables; using all as measure variables"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Zilber. Author, maintainer. Kyle Messier. Author.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zilber D, Messier K (2024). RGCA: Reflected Generalized Concentration Addition. R package version 1.0.0,, https://github.com/NIEHS/RGCA.","code":"@Manual{,   title = {RGCA: Reflected Generalized Concentration Addition},   author = {Daniel Zilber and Kyle Messier},   year = {2024},   note = {R package version 1.0.0,},   url = {https://github.com/NIEHS/RGCA}, }"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/index.html","id":"rgca","dir":"","previous_headings":"","what":"Reflected Generalized Concentration Addition","title":"Reflected Generalized Concentration Addition","text":"Reflected Generalized Concentration Addition: geometric, piecewise inverse function 3+ parameter sigmoidal (e.g. hill) models used chemical mixture concentration-response modeling Zilber, Daniel, Kyle Messier. “Reflected generalized concentration addition Bayesian hierarchical models improve chemical mixture prediction.” Plos one 19.3 (2024): e0298687.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/index.html","id":"key-inverse-function","dir":"","previous_headings":"","what":"Key Inverse Function:","title":"Reflected Generalized Concentration Addition","text":"$$ \\begin{equation}  f^{-1}(r | \\alpha>0, \\theta, \\beta>0) =  \\begin{cases}    \\frac{- \\theta}{1+\\left (\\frac{-\\alpha}{r} \\right)^{1/\\beta}} & r \\(-\\infty, 0)\\\\  \\theta \\left (\\frac{\\alpha}{r} -1 \\right)^{-1/\\beta} & r \\[0, \\alpha)\\\\   -2\\theta - \\theta\\left (\\frac{\\alpha}{2\\alpha - r} -1 \\right)^{-1/\\beta} & r \\(\\alpha, 2\\alpha)\\\\     -2\\theta + \\frac{\\theta}{1+\\left(\\frac{\\alpha}{r-2\\alpha} \\right)^{1/\\beta}} & r \\(2\\alpha, \\infty)\\\\  \\end{cases} \\end{equation} $$ inverse provides wide enough support satisfy invertibility requirements GCA, non-unit slopes. resulting inverse maintains coarse hyperbolic shape continuity smooth transitions. procedure limited Hill function can applied monotonic dose response function, resulting stability may vary. Note negative slope parameters Hill function supported.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/index.html","id":"abstract","dir":"","previous_headings":"","what":"Abstract:","title":"Reflected Generalized Concentration Addition","text":"Environmental toxicants overwhelmingly occur together mixtures. variety possible chemical interactions makes difficult predict danger mixture. work,  classical two-step model cumulative effects mixtures, assumes combination GCA independent action (IA). explore various clustering methods can dramatically improve predictions. compare technique IA, CA, GCA models show simulation study \\hl{two-step approach performs well variety true models. apply method challenging data set individual chemical mixture responses target androgen receptor (Tox21 AR-luc). results show significantly improved predictions larger mixtures. work complements ongoing efforts predict environmental exposure various chemicals offers starting point combining different exposure predictions quantify total risk health.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/RE_MCMC_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Effect MCMC fitting — RE_MCMC_fit","title":"Random Effect MCMC fitting — RE_MCMC_fit","text":"Performs Markov Chain Monte Carlo sampling procedure create posterior samples random effect model specified .  Uses Gibbs updates possible reverts Metropolis-Hastings Gaussian random walk proposals needed.  EC50 parameter varies multiple orders magnitude involves log normal proposal distribution.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/RE_MCMC_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Effect MCMC fitting — RE_MCMC_fit","text":"","code":"RE_MCMC_fit(y_i, Cx, replicate_sets, n_iter = 10000, n_hill_par = 3)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/RE_MCMC_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Effect MCMC fitting — RE_MCMC_fit","text":"y_i matrix dose responses individual chemicals.  Rows chemicals replicate separate row, columns dose, entries response. Cx matrix doses given individual chemicals.  Rows chemicals replicate separate row, columns index, entry dose.  match y_i replicate_sets list vectors vector row index replicates particular chemical.  length list match number unique chemicals. n_iter number iterations, defaults 10,000 n_hill_par specifies full Hill model 3 parameters fit (default) simplified model 2 parameters (slope =1) fit. Useful comparing method standard GCA, whcih requires slope=1.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/RE_MCMC_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Effect MCMC fitting — RE_MCMC_fit","text":"list full sampled chains parameters: slope (phi), sill+ec50 (theta1 theta2), noise variance (sigma), random effects, random effect prior variances.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/build_replicate_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds a design matrix for replicates of dose response data for performing a simultaneous Gibbs update for the sill, sill random effect, and intercept random effect — build_replicate_matrix","title":"Builds a design matrix for replicates of dose response data for performing a simultaneous Gibbs update for the sill, sill random effect, and intercept random effect — build_replicate_matrix","text":"Builds design matrix replicates dose response data performing simultaneous Gibbs update sill, sill random effect, intercept random effect","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/build_replicate_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds a design matrix for replicates of dose response data for performing a simultaneous Gibbs update for the sill, sill random effect, and intercept random effect — build_replicate_matrix","text":"","code":"build_replicate_matrix(v_list)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/build_replicate_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds a design matrix for replicates of dose response data for performing a simultaneous Gibbs update for the sill, sill random effect, and intercept random effect — build_replicate_matrix","text":"v_list list vector replicate. vector sequence coefficients length equal number doses (ie samples), computed according Hill model.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/build_replicate_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds a design matrix for replicates of dose response data for performing a simultaneous Gibbs update for the sill, sill random effect, and intercept random effect — build_replicate_matrix","text":"matrix built vectors input mimic design matrix linear model","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture Response Calculator Wrapper for Manuscript, with Sampling — create_mix_calc","title":"Mixture Response Calculator Wrapper for Manuscript, with Sampling — create_mix_calc","text":"factory method returns function computes mixture response. Samples directly posterior MCMC chains Hill parameters slope, sill EC50.  Noise added parameters according random effect variance.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture Response Calculator Wrapper for Manuscript, with Sampling — create_mix_calc","text":"","code":"create_mix_calc(idx, par_list, add_RE = TRUE, unit_slopes = FALSE)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixture Response Calculator Wrapper for Manuscript, with Sampling — create_mix_calc","text":"idx Specifies clustering apply parameters par_list data frame individual chemical dose response parameters add_RE boolean include exclude random effect variances unit_slopes boolean fix slopes 1 (still use slope clustering) Used special case GCA, slope = 1","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixture Response Calculator Wrapper for Manuscript, with Sampling — create_mix_calc","text":"function take concentration vector input response output","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc_clustered.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture Response Calculator Wrapper for Manuscript, using DP — create_mix_calc_clustered","title":"Mixture Response Calculator Wrapper for Manuscript, using DP — create_mix_calc_clustered","text":"factory method returns function computes mixture response. Samples directly posterior MCMC chains EC50 sill parameters. Slope taken Dirichlet Process clustering.  Noise added parameters according random effect variance.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc_clustered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture Response Calculator Wrapper for Manuscript, using DP — create_mix_calc_clustered","text":"","code":"create_mix_calc_clustered(idx, par_list, add_RE = TRUE, unit_slopes = FALSE)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc_clustered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixture Response Calculator Wrapper for Manuscript, using DP — create_mix_calc_clustered","text":"idx Specifies clustering apply parameters par_list data frame individual chemical dose response parameters add_RE boolean include exclude random effect variances unit_slopes boolean fix slopes 1 (still use slope clustering) Used special case GCA, slope = 1","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc_clustered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixture Response Calculator Wrapper for Manuscript, using DP — create_mix_calc_clustered","text":"function take concentration vector input response output","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc_from_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"These functions are wrappers for the factory method mix_function_generator. The wrappers provide different ways of sampling the parameters. Creates a function that computes mixture response. — create_mix_calc_from_summary","title":"These functions are wrappers for the factory method mix_function_generator. The wrappers provide different ways of sampling the parameters. Creates a function that computes mixture response. — create_mix_calc_from_summary","text":"factory method returns function computes mixture response. Uses summary statistics create random sample rather directly sampling posterior MCMC chains","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc_from_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"These functions are wrappers for the factory method mix_function_generator. The wrappers provide different ways of sampling the parameters. Creates a function that computes mixture response. — create_mix_calc_from_summary","text":"","code":"create_mix_calc_from_summary(idx, par_list)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc_from_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"These functions are wrappers for the factory method mix_function_generator. The wrappers provide different ways of sampling the parameters. Creates a function that computes mixture response. — create_mix_calc_from_summary","text":"idx Specifies clustering apply parameters par_list Contains estimated parameters DP cluster options","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/create_mix_calc_from_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"These functions are wrappers for the factory method mix_function_generator. The wrappers provide different ways of sampling the parameters. Creates a function that computes mixture response. — create_mix_calc_from_summary","text":"function takes concentration vector input yields predicted response output ie \"calculator\" mixture effect given component concentrations","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/eff_response_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture Response Optimization Routine — eff_response_opt","title":"Mixture Response Optimization Routine — eff_response_opt","text":"internal factory function returns function one input can optimized respect input. returned function computes generalized concentration addition formula input set chemicals input concentrations.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/eff_response_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture Response Optimization Routine — eff_response_opt","text":"","code":"eff_response_opt(   hill_inverse_list,   conc_vec,   synergy_const = 0,   interval_sign = 1 )"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/eff_response_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixture Response Optimization Routine — eff_response_opt","text":"hill_inverse_list list hill inverse functions one function per chemical conc_vec vector non-negative values length hill_inverse_list synergy_const scaling term synergy. Difficult specify used currently set 0, implying synergy. interval_sign 1 default can set -1.  Used chemicals negative sill. Details: numerical stability around small concentrations responses, output function exponentiates input response, making impossible invert negative response. least one chemical mixture negative sill, parameter set -1 check optimal (predicted) response negative.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/eff_response_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixture Response Optimization Routine — eff_response_opt","text":"function GCA_over_list response r input norm (measure optimality according GCA) output","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/get_mle_curve_fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum likelihood dose response curves — get_mle_curve_fits","title":"Maximum likelihood dose response curves — get_mle_curve_fits","text":"Wrapper function apply drc (dose response curve) package input data.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/get_mle_curve_fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum likelihood dose response curves — get_mle_curve_fits","text":"","code":"get_mle_curve_fits(y_i, Cx, replicate_sets)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/get_mle_curve_fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum likelihood dose response curves — get_mle_curve_fits","text":"y_i matrix observed dose responses (columns) multiple chemicals replicates (rows) Cx matrix doses corresponding responses replicate_sets list vectors vector contains indices replicates particular chemical","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/get_mle_curve_fits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum likelihood dose response curves — get_mle_curve_fits","text":"matrix parameters row chemical columns corresponding ()","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Hill function — hill_function","title":"Hill function — hill_function","text":"simple function compute Hill function response given parameters concentration","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hill function — hill_function","text":"","code":"hill_function(a, b, c, conc)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hill function — hill_function","text":"maximum effect sill b EC50 c slope conc input concentration dose","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hill function — hill_function","text":"real number prediction dose response","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hill function — hill_function","text":"","code":"hill_function(1, 1.5, 2, 3) #> [1] 0.8"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_invs_factry.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Hill Function Factory — hill_invs_factry","title":"Inverse Hill Function Factory — hill_invs_factry","text":"inverse function used single dose response curve, assumed Hill function.  factory method used avoid repeatedly passing curve parameters; generated, inverse calculator needs response point y return inverse (dose) required get response.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_invs_factry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Hill Function Factory — hill_invs_factry","text":"","code":"hill_invs_factry(a, b, c, max_R = 1, d = 0)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_invs_factry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Hill Function Factory — hill_invs_factry","text":"sill (max effect) b EC50 c slope max_R maximum effect across chemicals d minimum effect","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_invs_factry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Hill Function Factory — hill_invs_factry","text":"function compute inverse given mixture response R","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/hill_invs_factry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Hill Function Factory — hill_invs_factry","text":"","code":"NA #> [1] NA"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/mix_function_generator.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture Response Calculator — mix_function_generator","title":"Mixture Response Calculator — mix_function_generator","text":"Factory method return function predicts mixture response given concentrations mixture component chemicals. factory method used uncertainty quantification based bootstrapped collection feasible parameters, set parameters leads different predictor mixture effect.  Rather keeping track lists parameters, immediately convert sampled parameter set function (\"calculator\") takes mixture concentration input. list calculators can applied ","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/mix_function_generator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture Response Calculator — mix_function_generator","text":"","code":"mix_function_generator(   param_matrix,   clust_assign,   get_counts = FALSE,   scale_CA = FALSE,   synergy_const = 0 )"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/mix_function_generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixture Response Calculator — mix_function_generator","text":"param_matrix simple matrix object rows corresponding unique chemicals columns representing parameters (, b, c, max_R, d), sill b EC50 c slope value max_R maximum sill across chemicals (deprecated) d minimum response (deprecated) clust_assign vector integers defining cluster membership. 3 chemicals, clust_assign c(1,2,1), meaning chemicals 1 3 clustered together 2 .  assumed cluster assignments start 1 skip integers. get_counts boolean flag return count number solutions found scale_CA boolean flag apply Concentration Addition assumption equal sills synergy_const real number used adjust mixture prediction synergistic effects","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/mix_function_generator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixture Response Calculator — mix_function_generator","text":"instance function mix_effect_fun takes input concentration component chemicals outputs predict response","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/predict_mix_response_many.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Responses for a List of Calculators, generic — predict_mix_response_many","title":"Predict Responses for a List of Calculators, generic — predict_mix_response_many","text":"similar function predict_mix_response.  convenience function takes list lists input iteratively applies elements, bootstrapped mixture repsonse calculators, columns mixture dose matrix.  example, three different clustering approaches can used outer list inner list 50 bootstrapped mixture response estimators.  outer list length 3 inner list length 50.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/predict_mix_response_many.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Responses for a List of Calculators, generic — predict_mix_response_many","text":"","code":"predict_mix_response_many(   n_dose,   chem_conc_matr,   bootstrap_calc_list,   default_entry = 0 )"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/predict_mix_response_many.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Responses for a List of Calculators, generic — predict_mix_response_many","text":"n_dose number mixture doses chem_conc_matr matrix rows represent constituent chemicals columns represent dose.  column sum mixture dose. bootstrap_calc_list list lists boostrapped functions, instances produced factory method mix_function_generator default_entry default entry methods, default=0.  Can set null NA aid plotting","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/predict_mix_response_many.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Responses for a List of Calculators, generic — predict_mix_response_many","text":"list matrices matrix dose column bootstrapped response prediction row.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull parameter posterior chains from an MCMC object. — pull_parameters","title":"Pull parameter posterior chains from an MCMC object. — pull_parameters","text":"Given MCMC chain fit RE_MCMC_fit, pull chains representing parameter posteriors compute estimates parameters applying summary statistic function posterior samples.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull parameter posterior chains from an MCMC object. — pull_parameters","text":"","code":"pull_parameters(re_chains, summry_stat = stats::median, input_replicates = NA)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull parameter posterior chains from an MCMC object. — pull_parameters","text":"re_chains output RE_MCMC_fit consisting list parameter chains, chain vector posterior samples summry_stat statistic used summarize posterior.  Default median, can mean similar measure center. input_replicates optional list indices replicates chemical","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull parameter posterior chains from an MCMC object. — pull_parameters","text":"list posterior samples summary estimates parameters","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_parameters_nimble.html","id":null,"dir":"Reference","previous_headings":"","what":"Organize output of the Nimble MCMC — pull_parameters_nimble","title":"Organize output of the Nimble MCMC — pull_parameters_nimble","text":"Fitting random effect model data using Bayesian method like MCMC creates posterior samples.  implementation Nimble creates large output object contains posterior samples burn-thinning. function organizes samples convenient downstream usage.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_parameters_nimble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organize output of the Nimble MCMC — pull_parameters_nimble","text":"","code":"pull_parameters_nimble(   nimble_samples,   summry_stat = stats::median,   input_replicates = NA )"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_parameters_nimble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organize output of the Nimble MCMC — pull_parameters_nimble","text":"nimble_samples object returned run_RE_nimble function found inst folder. summry_stat function used compute summarizing statistic slope parameter.  Default function median. input_replicates optional list indices replicates chemical.  default, input_replicates NA method assumes exists global var called replicate_sets","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_parameters_nimble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organize output of the Nimble MCMC — pull_parameters_nimble","text":"named list arrays array posterior thinned sample nimble chain.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_summary_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull parameters from an MCMC chain — pull_summary_parameters","title":"Pull parameters from an MCMC chain — pull_summary_parameters","text":"Given MCMC chain fit RE_MCMC_fit, estimate parameter values using summary statistic applied posterior samples.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_summary_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull parameters from an MCMC chain — pull_summary_parameters","text":"","code":"pull_summary_parameters(re_chains, summry_stat = stats::median)"},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_summary_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull parameters from an MCMC chain — pull_summary_parameters","text":"re_chains output RE_MCMC_fit consisting list parameter chains, chain vector posterior samples summry_stat statistic used summarize posterior.  Default median, can mean similar measure center.","code":""},{"path":"https://spatiotemporal-exposures-and-toxicology.github.io/RGCA/reference/pull_summary_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull parameters from an MCMC chain — pull_summary_parameters","text":"list parameter estimates","code":""}]
